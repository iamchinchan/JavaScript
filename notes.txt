//////////////////////////////************JAVASCRIPT*************///////////////////////////////////////

fundamentals:

alert("")
we can do calulations in console
we have strings in JAVASCRIPT

programming styles: imperative, declarative: diff ways of structuring our code.

core  tech of web: HTML, CSS, JAVASCRIPT

JS: real programming language of web, to add dyanmic and interactive effects on web page or web apps., 
it allows to manupilate content and css, load data from remote servers, to make entire apps in the browsers which we call web apps.

JS modern libraries and frameworks: Angular, React, Vue : all 100% based on JS
js can be used outside of browsers like on a server which in the end is a computing machine
so using  node.js(which is made on top of v8 js engine(to convert js code to machine code for machines to execute)) on the machine we can write js code for our back-end applications as well to handle api's and to connect with database.
and back-end application run on servers: which as i said is also connected to database: so js can be used on servers to make back -end apps we can say

js: use for native mobile app(react native , ionic) or native desktop(elctron) application for any os out there

convention: camel case for variable names, uppercase all letters for constants: but it wont be considered as constant just by uppercase, 

rules:
can start with $ or _ , but not with numbers, but can also contain numbers.
dont use keywords, and should not use "name", is legal but we should not,
we should not use uppercase first letter for variable names, as we use the same for classes declarations, not illegal but to maintain a convention.

number, string, boolean, undefined, symbol, big int, null

in js values has types not variables,
same variable can store diff type of values in 1 code instance

dynamic typing: change data type of value holding inside a variable



//////////////////////////////always remeber this:///////////////////////

console.log("type of string is: ", typeof string);
console.log("type of undefined is: ", typeof undefined);
let declare;
console.log("type of declare is: ", typeof declare);
console.log("value of declare is: ", declare);
let val = null;
console.log("value of val is: ", val);
console.log("type of val is: ", typeof val);
console.log("type of null is: ", typeof null);

***********************************
type of string is: string
assignments.js:6 type of undefined is:  undefined
assignments.js:8 type of declare is:  undefined
assignments.js:9 value of declare is:  undefined
assignments.js:11 value of val is:  null
assignments.js:12 type of val is:  object
assignments.js:13 type of null is:  object
content.js:3 I am content script

//////////////////////////////////////

let: block scoped, and
var: function scoped
more in sec 7 of course;

we can ignore all 3: let, const, var, and do like this:
name = "jatin"
console.log(name);
but it will create a property on global object
this variable wont be created in so called scoped block

all the variables can be visible in browser console  while the file is running in the browser

operators:
mathematical: +,-,*,/,%, **
+ can be used to concatenate 2 strings

assigment operators: =,++,--, +=, -=,....

comparison operators: booelan result in the end: >, < ,  <=, >=
equality operators: ==, ===
logical operators: &&, ||


template literals for bis string using backticks ``

\n for new line, and if to write in a same way in editor then use \n\ or `` (template literal)

type conversion and type coercion:
NaN: not a number
typeof NaN is:  number, so somehow it is a number but not a valid 1
functions: Number, String
type conversion only works to 3 types: boolean, number, string

prompt("");

diff operator:  !==, !=

if in prompt nothing is entered then it takes 0 as input not undefined or null if Number(prompt()) is used.
and it will take emplty string normally and type will be string : is used as this: prompt(); and clicked ok
and it will contain null as value and type of object if empty but clicked cancel using normal prompt();
so make sure to check every possibility before implementing whole code

5 falsy values: undefined, null, 0, NaN, ''
{}: this is not a falsy value, even though object itself is empty

switch case does struct comaprison : ===
default can also run if break is missing till the actual case which is matching

ternary operators: expression? true code : falsy code

and conditonal operators can be used as an expressions as they just produces values, and we can also use ternary op with them in an expression, but we have to make sure to not use statements as an ?/: part of ternary operator

for ex: we can do like this:
const age = 10;
console.log(`I like to drink ${age >= 18 ? "Wine 🍷🍾" : "milk 🥛"}`);

transpiling, polyfilling: processes to convert js of diff releases, like from Es6 modern js code to Es5
using babel for plyfilling: still to learn how our modern js code will  run in production in user's desktop using old versions of browsers which does not have implementation according to the latest release of js , which we have used in our code already

EsNext: future planned releases for js

Es6 compatibility table

ecmascript link for js help: https://tc39.es/ecma262/#sec-islooselyequal

more on ternary conditonal operator: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator

////////////////////////
More fundamentals:-
//////////////////////

'use strict'; for strict mode

calling, running, invoking the function


function noparamsnoreturn(){
  //console
}
noparamsnoreturn(); // this will do only console and wont generate any result or value as there is no return in the function itself , so it produces undefined

so : console.log(noparamsnoreturn()); will also console undefined in the console window

fn declaration and fn expression:
 anonymoous function: fn without a  name


 expression produces a value
 and we can use fn as an expression to br a value for  a variable like:
 const fnvar = function expression
so fnvar(lfs var) will hold the value which is an function expression
in js functions are like values

fn defined using fn declarations can be acces before initialization but fn expressions cannot

arrow function: ES6 feature : shorter form of function expression :  good for 1 liner functions, but we can use multiple statementds using {}, we can omit reutn in 1 liner functions, we can also use multiple parametr using ()
ex: 
const fnvar = parametr => return statatement;
arrow functions do not have this keyword to use, so not a good idea to use these all the time ignoring fn declaration and function expressions which both do have (this) keyword to use.

console.log is an js inbuilt function.

strings in js can be written boith in '', or in "", as there is not such thig as character data type in js as we have in C++

data structure: 

Arrays:

 index from 0
2 ways to define arrays:
literal syntax, using new keyword as below
const years= new Array(value of any type,...);  :-> Array() is a fn
arrays are mutable even whenn declared as const, more in sec: 8 -> hopefully, it happens bcz of some reason the way they are stored in the memory
but we cant change the entire array if defined as const, by entire i mean re writing assignmentt statement to an array (not for an particular index, bcz that works as told above)
arrayName.length
arrayName[expression]

js built in functions to use on array: called array methods

in an empty array we can direct add value to any index and it will dynamically add that value in the array making other previous index values(if there are any) undefined.:code ex in script.js
array methods:
push(element): push to the end : return lenght of new array.
unshift(element) :  push to the front : return lenght of new array.
.pop() : returns removed element : from last
.shift() : return element that was removed :  from front
indexOf(element): return index at which this element is stored(index starts from 0), -1 if not present in the Array. : no type coercion, strict matching
.includes(element) : returns boolean : no type coercion, strict matching
we can use varibale names directly inside an array
conat varNam = 44;
const arrVar=[varNam,"+6",50]
const array3= array1.concat(array2);

Objects data str in js:  


key value pairs, value can be an  expression also
const objectVar = {
  key value pairs
}
this is called a object literal syntax

value can be a varlable or a fn in a object
const var=10;//or other value of any type(araay , object, number, any expression, also includes functions(any type dec or expressions)))
function add(a, b) { // const add = function(a,b)
  return a + b;
}
const testObject = {
  a: 5,
  b: 7,
  add: add,
};
console.log(testObject);
console.log(testObject.add(testObject.a, testObject.b));//12
console.log(testObject.add(4, 9));//13


to use variable's value as an key in the object use [] around variable name while using it as the key:
most useful when we will have to change formats of our data: as I did while helping divesh, fileName: formatDivesh.js in jsFundamentals folder.

const name1 = "firstname";
const objectVar = new Object({
  [name1]: "jatin goyal",
});

values can be any type of expressions/ values 
so they can be an array, an object or any expression resulting in a value of any type, but should not be a statment(only expressions are allowed)

object data update and retreival using dot(.) and bracket[] operator

objectVar.key : . is an operator
objectVar[`key`] : [] is also an operator: [] can contain any expression whose value must be then equivalent to one of the key in the object already present there , but a string type , so we can use `` most helpful here

objectVar.notPresentKey / objectVar[notPresentKey] = undefined

we can also add new properties to the object using both the . and [] operators

. and [] have really high precedence and both of them have left to right associativity

so that why : objectVar.arrayKey.length works fine as we expect: objectVar.arrayKey is solved first then we have array on which we call length function(inbuilt array method) so final result is length of the array which is a key value pair inside an object named objectVar

we can also add fcuntions(expression functions) to object, as we can use functions as values in js;
any function attachedd to a object is called a method.

objectVar.method(parameters) / objectVar['methodName'](parameters); : bcz of precedence, so first that key will be retreied which is a function then we call it using () adding parameters if there are any expected.

in methods, js gives us access to variable called this; not sure if arrow functions behave in the same way or not: acc to my testing this was not working with arrow method when i tried it in object, not sure about other cases: more in sec 7 or 8 of course 

this keyword/variable: basically is object on which the method is called,  = object calling the method

array's are itself object in the end: so type of arrayVariable: object

if an object is defined with a value having prompt then it will ask for value while going through that code

More control structures:
Loopings:

for loop: have counters
for is a statement like an  if-else, its not an expression


Debugging:

console.warn
console.error
console.table
debugger;


Array.isArray()

HTML: button is an inline-block element
input element and type attribute on it
form : semantic element for forms

/**********************DOM and Events fundamentals************************/

js can interact with real websites/web pages

document : is an object itself which is a entry point to the entire DOM which is Dociument object model : a complete representation of HTMl document : tree like a str to represent the HTMl elements ans texts too

each of them acts as a node which we can then access via web api's provided by browsers to us written in js according to the DOM specification, so that every browser are on common platform

so DOM and DOM methods like querySelector() are not a partof js , but are part of Web API's just like timers and fetch and all of these web API's an be used in our js code that we write to manipulate the html elements, text , css styling and html attributes in short to interact with our real webpages

querySelector(selector in a string format and can be used just like in CSS)
for ex: '.class' or '#id' and more ways to select an element

.textContent method to get the text fron an selected element using querySelector maybe, but there are also other ways as well

so DOM is kinda connection between out js code and the HTMl page being rendered in the browser

we have a DOM tree similar to str of HTML elements and text as mentioned earlier

DOM methods like querySelector are part of web API's not a syntax of JS language

and Web APi's are libraries implemented by browsers in js itself for us users to be used in ouor code without any specific imports

and with the help of these API's we can manipulate the actual HTMl elements of the webpage being rendered in the browser.

****************Events and Event eventListeners:

The addEventListener() method of the EventTarget interface sets up a function that will be called whenever the specified event is delivered to the target. Common targets are Element , or its children, Document , and Window , but the target may be any object that supports events (such as XMLHttpRequest ).


//**************************************//
function expressions and arrow fns can be used in place of truthy and flasy values as follows: 

const sd = 'y';
// const newFnAdd = sd ? (a, b) => a + b : 'not done yet';
const newFnAdd = sd
  ? function (a, b) {
      return a + b;
    }
  : 'not done yet';
console.log(newFnAdd);
const addVal = newFnAdd(5, 2);
console.log(addVal);

now imp thing is that fn declarations can alsobe used as values :
const newFnAdd = sd
  ? function addvar(a, b) {
      return a + b;
    }
  : 'not done yet';
   
this is valid

so all 3 types of fn learnt can be treated as values, so can be used in object as well as values and can be passed to another fn as arguements as well (check for fn declaration? added in questions filke as well : checked and yes we can add).

fn's can be treated as values (all 3 type of fn's including declarations) and values are part of expressions, and so that fn's can be used as values and expression so can be used in ternary operators and can be passed into another fn as arguements

till now only 1 diff encountered between dec and expression is thaat fn dec can be used before its declaration but fn expressions cannot be used before.

The Math.random() method returns a random number from 0 (inclusive) up to but not including 1 (exclusive).

querySelector is a method on objects , that we generally use on document object to receive element as a return value

.textContent is a property of the elements which in turn themselves are objects like document is.

we can also set the value or textContent property on elements.

each HTML element is represented as DOM node in DOM

we cannot set the entire elemnt but we can set textContent as whole element has more than just a text value/content.

Anything happening on page is called an event and it can be of many types, like click, mouseover, keypress and many more and we can add event listneres in our js code to react to those events (something happening/changing in DOM state)

event listeners wait for certain events.

addEventListener is a method:

The addEventListener() method of the EventTarget interface sets up a function that will be called whenever the specified event is delivered to the target. Common targets are Element , or its children, Document , and Window , but the target may be any object that supports events (such as XMLHttpRequest ).

addEventListener expects mainly 2 arguements ast: type of event and 2nd one is a function called event handler, as fn can be used as values, so this 2nd arguement is a fn passed in as a value: fn declaration can also be used not only fn expressions
we generally pass the fn expressions and as we dont assign it to a variable we also call it here: anonymoous function.

Math is a object provided by js to us and random(), trunc() these are methods available on the Math object.

some variables are called state variables as they are part of the application state:
and all the data relevant to the application is part of application and hence variables storing that data is called state variables.


DOM methods and properties for DOM manipulate are part of web API's not js

css property: 
backdrop-filter: blur(3px);
The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element.

querySelectorAll method gives a nodeList , which can be treated like a Array , not an actual array but we can lopp through it like an array to access each node it contains.

node.classList.remove/.add/.contains
classList is a property on a node(in hsort its a API which provides us methods and values to use with the APi itself) and .remove/.add/.contains are methods on the classList property

but how can we add methods on property which are then changing its  values(classes):
more on classList: https://developer.mozilla.org/en-US/docs/Web/API/Element/classList
asked ques on udemy video number: 79 and 80

The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list. Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via element.className .

js engine calls the handler fn as soon as event ocurs , we do not call the handler fn.

keypress/down/up are global events: and we can listen them on whole document not on particular element.

we ahve mainly 3 keypress events
keydown : only when a key is hitted
keypress: as long as key is pressed
keyup : oonly when we lift the finger from the key after pressing it maye only for an instant

Handler waits for an particular defined (in 1st arguement ) event to ocur , and whenever that event occurs js generates an object containing all the information about the event itself. then this object can be accessed by the event handler function and we can do that so by passing an parameter with any name in the handler fn itself then inside that handler fn we will get access to all the info about the event. All this is possible bcz its not us who call the handler fn but js engine itslef calls the fn on the event occurence so we just tell js that whenever this event ocurs pls pass the generated event object to handler fn while calling it.

how nodeList is not an array: https://www.w3schools.com/jsref/dom_obj_html_nodelist.asp

more on DOMTokenList: https://www.w3schools.com/jsref/dom_obj_html_domtokenlist.asp

**********udemy response for classList property:*************
ques: ClassList is a property and it has methods? how a read- only property can have methods on it ?

In Video #80 working with classes, at 4.22 You said classList is a property and .remove/add/contains are all methods that can be applied on this property, firstly I am confused here about how a property can have methods that then change the property itself as we are removing/adding classes using these methods, and after a little research I found this line on MDN: "The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list."
so how we can change the classes using classList property if it is an read only property, what exactly does it mean? and what is an DOMTokenList? I have seen this in console many times while working with WEB API:S
and also on MDN, it is written that classList is a API, so whats exactly is a classList? an APi? a read- only property?
pls explain and tell me the difference between these terms, property/DOM Property, API, DOMTokenList

Answer: 

Properties can store different data types, for example, numbers, strings or objects.

For example, the object below has a property called john, which stores an object, which has its own properties and methods

const people = {
  john: {
    name: 'John',
    birthYear: 1990,
    calcAge: function () {
      return new Date().getFullYear() - this.birthYear;
    }
  }
};
 
console.log(people.john.calcAge());
The same applies to the classList property, which stores an object — an instance of the DOMTokenList.

The DOMTokenList is a special "interface" (like a class or constructor) that is used to represent space-separated list of different tokens from the DOM. In our case, tokens are the classes applied to an Html element. Simply, it's just a list of strings.

The read-only property means you can only read a value assigned to this property, but not reassign it. The DOMTokenList is an object (reference type), which means you can modify it without reassignment. It's like with objects assigned to a const variable

const john = {
  name: 'John'
};
 
john.birthYear = 1990;
I can add properties to the john variable even if it's a constant. Why? because there is no reassignment of the variable. I'm just modifying the object assigned to this variable, without reassignment.

The term "API" can mean many things.

***********************API's *************************
1 of courses answer: 
API stands for Application Programming Interface. It can have a slightly different meaning depending on the context, but generally, API exposes "something" to allow you to work with a complex system.

For example, we can have a class with different properties and methods. Some of them are private and some of them are public. These public methods can be viewed as an API, so as an interface that allows us to work with that class.

Another example are web APIs (for example, RESTful APIs) that expose resources through endpoints, for example, let's say there is an app about books that exposes /books endpoint

www.example.com/books
Sending a GET request to that /books endpoint would give us data about different books in the system.

We also have something called Web APIs in the browser. These are functions exposed by browsers to work with different things, like canvas, geolocation, or local storage.

element.src=`` is same as element.setAttribute("src",``). sor we direct use attributes as element properties in js

classList.toggle(), we also have toggle method.

doc.getElementById('no # and only id name') : more faster than querySelector

